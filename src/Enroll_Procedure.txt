USE `project3-nudb`;

DROP procedure IF EXISTS `listCourses`;

DELIMITER $$
USE `project3-nudb`$$
CREATE PROCEDURE listCourses
(IN curyear char(20),
 IN curquarter char(20),
 IN nextyear char(20),
 In nextquarter char(20))
Begin
SELECT lec.UoSCode, lec.Semester, lec.Year
FROM lecture lec
WHERE (lec.Year = curyear and lec.semester = curquarter) or (lec.Year = nextyear and lec.semester = nextquarter)
order by year, semester;
End$$

DELIMITER ;

DROP procedure IF EXISTS `isvalid`;

DELIMITER $$
USE `project3-nudb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `isvalid`(IN studentid char(20),
 IN courseid char(20),
 IN curyear char(20),
 IN curquarter char(20),
 IN nextyear char(20),
 In nextquarter char(20))
Begin
SELECT distinct uo.UoSCode
FROM uosoffering uo
WHERE ((uo.semester = curquarter and uo.year = curyear) or (uo.semester = nextquarter and uo.year = nextyear)) and
uo.MaxEnrollment > uo.Enrollment and (uo.UoSCode in (select r.UoSCode from requires r where r.UoSCode = courseid and
r.PrereqUoSCode in ( select t.UoSCode from transcript t where t.StudId = studentid and t.grade is not null and
t.grade = 'F')));
End$$

DELIMITER ;

DROP procedure IF EXISTS `needprereq`;

DELIMITER $$
USE `project3-nudb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `needprereq`(IN studentid char(20),
 IN courseid char(20),
 IN curyear char(20),
 IN curquarter char(20),
 IN nextyear char(20),
 In nextquarter char(20))
Begin
SELECT distinct uo.UoSCode
FROM uosoffering uo
WHERE ((uo.semester = curquarter and uo.year = curyear) or (uo.semester = nextquarter and uo.year = nextyear)) and
uo.MaxEnrollment > uo.Enrollment and (uo.UoSCode in (select r.UoSCode from requires r where r.PrereqUoSCode in (
select t.UoSCode from transcript t where t.StudId = studentid and (t.grade is null or t.grade = 'F'))));
End$$

DELIMITER ;

DROP procedure IF EXISTS `enrollclass`;

DELIMITER $$
USE `project3-nudb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `enrollclass`(IN studentId char(20),
 IN courseId char(20),
 IN courseyear char(20),
 IN coursesemester char(20))
Begin
start transaction;
insert into transcript
values(studentId, courseId, coursesemester, courseyear, null);
UPDATE uosoffering
SET
    uosoffering.Enrollment = uosoffering.Enrollment + 1
WHERE
    uosoffering.Uoscode = courseId
        AND uosoffering.Semester = coursesemester
        AND uosoffering.Year = courseyear;
commit;
End$$

DELIMITER ;

DROP procedure IF EXISTS `listprereq`;

DELIMITER $$
USE `project3-nudb`$$
CREATE PROCEDURE `listprereq`
(in courseId char(20))
BEGIN
select r.PrereqUoSCode from requires r where r.UoSCode = courseId;
END$$

DELIMITER ;